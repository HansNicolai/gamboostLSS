
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###
> # check gamboostLSS()
> 
> require("gamboostLSS")
Loading required package: gamboostLSS
Loading required package: mboost
Loading required package: parallel
Loading required package: stabs
This is mboost 2.8-0. See 'package?mboost' and 'news(package  = "mboost")'
for a complete list of changes.


Attaching package: 'gamboostLSS'

The following object is masked from 'package:stats':

    model.weights

> 
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 + 0.3 * x1^2 + 0.5 * x2 - 3 * sin(x3) -1 * x4)
> sigma <- exp(-0.2 * x4 + 0.2 * x5 + 0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> model <- gamboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 200))
> 
> coef(model)
$mu
$mu$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 1.15444358  0.93545366  0.71693679  0.50042410  0.28570758  0.07534535 
          7           8           9          10          11          12 
-0.11839908 -0.27732531 -0.38543938 -0.43568214 -0.42822224 -0.36389774 
         13          14          15          16          17          18 
-0.24633715 -0.08712618  0.09162060  0.27043055  0.45036688  0.63285550 
         19          20          21          22          23          24 
 0.81691740  1.00419534  1.19460215  1.38640544  1.57832844  1.77025938 

$mu$`bbs(x2, df = dfbase)`
            1             2             3             4             5 
-0.3672899861 -0.3558804221 -0.3444700110 -0.3330501554 -0.3215346309 
            6             7             8             9            10 
-0.3097128609 -0.2972908111 -0.2840287784 -0.2698403860 -0.2552168115 
           11            12            13            14            15 
-0.2393630042 -0.2180543316 -0.1868538288 -0.1421989711 -0.0805408289 
           16            17            18            19            20 
-0.0007499782  0.0957227241  0.2045754665  0.3171470538  0.4253103506 
           21            22            23            24 
 0.5293373847  0.6314883382  0.7326624542  0.8337638420 

$mu$`bbs(x3, df = dfbase)`
         1          2          3          4          5          6          7 
 1.6269075  1.6617902  1.6962192  1.7271813  1.7472342  1.7397791  1.6679611 
         8          9         10         11         12         13         14 
 1.4759205  1.1176204  0.6181839  0.0338233 -0.5479631 -1.0362682 -1.3826404 
        15         16         17         18         19         20         21 
-1.5836940 -1.6692967 -1.6760656 -1.6334835 -1.5615529 -1.4722260 -1.3733208 
        22         23         24 
-1.2695403 -1.1639141 -1.0581252 

$mu$`bbs(x4, df = dfbase)`
          1           2           3           4           5           6 
 2.55229361  2.24960552  1.94876409  1.65787561  1.38476695  1.13402107 
          7           8           9          10          11          12 
 0.90460104  0.69199958  0.48667665  0.27458711  0.04879986 -0.17271441 
         13          14          15          16          17          18 
-0.36207875 -0.50902479 -0.61846341 -0.69684702 -0.75045489 -0.78790731 
         19          20          21          22          23          24 
-0.81606431 -0.83940053 -0.86068780 -0.88116968 -0.90145775 -0.92172844 

attr(,"offset")
[1] 4.055461

$sigma
$sigma$`bbs(x1, df = dfbase)`
           1            2            3            4            5            6 
-0.030414452 -0.022125579 -0.013853677 -0.005537584  0.003564307  0.013555209 
           7            8            9           10           11           12 
 0.022918014  0.029180381  0.030332222  0.026724511  0.021145904  0.015189262 
          13           14           15           16           17           18 
 0.010297464  0.008747280  0.011992096  0.020480825  0.032398957  0.046426092 
          19           20           21           22           23           24 
 0.061714526  0.077812251  0.094364438  0.111135110  0.128012734  0.144908214 

$sigma$`bbs(x2, df = dfbase)`
          1           2           3           4           5           6 
-1.00531259 -0.89894200 -0.79242156 -0.68500259 -0.57580592 -0.46457099 
          7           8           9          10          11          12 
-0.35361690 -0.24906416 -0.15890635 -0.08197540 -0.01224825  0.05171766 
         13          14          15          16          17          18 
 0.11197233  0.16734047  0.20896077  0.23023382  0.22855164  0.21542982 
         19          20          21          22          23          24 
 0.20447995  0.20878254  0.22816319  0.25642980  0.28851622  0.32095753 

$sigma$`bbs(x3, df = dfbase)`
          1           2           3           4           5           6 
 0.12063540  0.25402927  0.38682571  0.51548479  0.63424538  0.73889096 
          7           8           9          10          11          12 
 0.82637000  0.89629038  0.94519454  0.94149972  0.85858321  0.66899776 
         13          14          15          16          17          18 
 0.37527216  0.03122394 -0.30529939 -0.58985492 -0.78942381 -0.90269096 
         19          20          21          22          23          24 
-0.94431872 -0.93456023 -0.89272664 -0.83376343 -0.76851225 -0.70247346 

$sigma$`bbs(x4, df = dfbase)`
          1           2           3           4           5           6 
 0.86989263  0.87994191  0.88853846  0.88929979  0.87589781  0.84275362 
          7           8           9          10          11          12 
 0.78591632  0.70378776  0.60586559  0.50846766  0.41948694  0.32797963 
         13          14          15          16          17          18 
 0.21454813  0.07793246 -0.07497320 -0.23830308 -0.39954949 -0.55170872 
         19          20          21          22          23          24 
-0.69771925 -0.84192690 -0.98877499 -1.13761935 -1.28717664 -1.43691337 

$sigma$`bbs(x5, df = dfbase)`
            1             2             3             4             5 
-0.0023004782 -0.0022666543 -0.0022291318 -0.0021710972 -0.0020661463 
            6             7             8             9            10 
-0.0018478101 -0.0014703494 -0.0009604535 -0.0003984816  0.0001909115 
           11            12            13            14            15 
 0.0008694373  0.0017723942  0.0029451303  0.0043234390  0.0057278955 
           16            17            18            19            20 
 0.0070223603  0.0081077393  0.0090216914  0.0098791885  0.0107300399 
           21            22            23            24 
 0.0116063914  0.0125359462  0.0134878188  0.0144412255 

$sigma$`bbs(x6, df = dfbase)`
          1           2           3           4           5           6 
-0.21860926 -0.21538642 -0.21197455 -0.20629754 -0.19256418 -0.16763016 
          7           8           9          10          11          12 
-0.12961305 -0.07657484 -0.01111446  0.05578871  0.11239796  0.15326313 
         13          14          15          16          17          18 
 0.18085349  0.19695872  0.20194123  0.20159996  0.20232816  0.20546306 
         19          20          21          22          23          24 
 0.21031886  0.21775473  0.22809249  0.24020570  0.25283989  0.26553389 

attr(,"offset")
[1] -1.650591

> 
> par(mfrow = c(3,2))
> plot(dat$x3, fitted(model$mu, which = "x3"), main = "mu")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> plot(dat$x3, fitted(model$sigma, which = "x3"), main = "sigma")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> 
> model[400]

	 LSS Models fitted via Model-based Boosting

Call:
gamboostLSS(formula = y ~ ., data = dat, families = NBinomialLSS(),     control = boost_control(mstop = 200))

Number of boosting iterations (mstop):  mu = 400, sigma = 400 
Step size:  mu = 0.1, sigma = 0.1 

Families:

	 Negative Negative-Binomial Likelihood: mu (log link) 

Loss function: -(lgamma(y + sigma) - lgamma(sigma) - lgamma(y + 1) + sigma *  
     log(sigma) + y * f - (y + sigma) * log(exp(f) + sigma)) 
 

	 Negative Negative-Binomial Likelihood: sigma (log link) 

Loss function: -(lgamma(y + exp(f)) - lgamma(exp(f)) - lgamma(y + 1) + exp(f) *  
     f + y * log(mu) - (y + exp(f)) * log(mu + exp(f))) 
 
> plot(dat$x3, fitted(model$mu, which = "x3"), main = "mu")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> plot(dat$x3, fitted(model$sigma, which = "x3"), main = "sigma")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> 
> model[600]

	 LSS Models fitted via Model-based Boosting

Call:
gamboostLSS(formula = y ~ ., data = dat, families = NBinomialLSS(),     control = boost_control(mstop = 200))

Number of boosting iterations (mstop):  mu = 600, sigma = 600 
Step size:  mu = 0.1, sigma = 0.1 

Families:

	 Negative Negative-Binomial Likelihood: mu (log link) 

Loss function: -(lgamma(y + sigma) - lgamma(sigma) - lgamma(y + 1) + sigma *  
     log(sigma) + y * f - (y + sigma) * log(exp(f) + sigma)) 
 

	 Negative Negative-Binomial Likelihood: sigma (log link) 

Loss function: -(lgamma(y + exp(f)) - lgamma(exp(f)) - lgamma(y + 1) + exp(f) *  
     f + y * log(mu) - (y + exp(f)) * log(mu + exp(f))) 
 
> plot(dat$x3, fitted(model$mu, which = "x3"), main = "mu")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> plot(dat$x3, fitted(model$sigma, which = "x3"), main = "sigma")
> lines(sort(dat$x3), - 3 * sin(dat$x3)[order(dat$x3)], col = "red")
> 
> proc.time()
   user  system elapsed 
   6.31    0.07    6.61 
