
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ###
> # Bugfixes
> 
> require("gamboostLSS")
Loading required package: gamboostLSS
Loading required package: mboost
Loading required package: parallel
Loading required package: stabs
This is mboost 2.6-0. See 'package?mboost' and 'news(package  = "mboost")'
for a complete list of changes.


Attaching package: 'gamboostLSS'

The following object is masked from 'package:stats':

    model.weights

> 
> ## subset method was missing if initial mstop = 1
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 + x1^2 +0.5 * x2 - 3 * sin(x3) -1 * x4)
> sigma <- exp(-0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> model <- gamboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 1))
> model[10]

	 LSS Models fitted via Model-based Boosting

Call:
gamboostLSS(formula = y ~ ., data = dat, families = NBinomialLSS(),     control = boost_control(mstop = 1))

Number of boosting iterations (mstop):  mu = 10, sigma = 10 
Step size:  mu = 0.1, sigma = 0.1 

Families:

	 Negative Negative-Binomial Likelihood: mu (log link) 

Loss function: -(lgamma(y + sigma) - lgamma(sigma) - lgamma(y + 1) + sigma *  
     log(sigma) + y * f - (y + sigma) * log(exp(f) + sigma)) 
 

	 Negative Negative-Binomial Likelihood: sigma (log link) 

Loss function: -(lgamma(y + exp(f)) - lgamma(exp(f)) - lgamma(y + 1) + exp(f) *  
     f + y * log(mu) - (y + exp(f)) * log(mu + exp(f))) 
 
> 
> 
> ## selected() was broken (didn't call mboost-function)
> stopifnot(all.equal(selected(model),
+                     list(mu = mboost::selected(model[[1]]),
+                          sigma = mboost::selected(model[[2]]))))
> 
> 
> # If the families argument is not specified explicitly in mboostLSSone gets an
> # error in cvrisk.mboostLSS() (spotted by Almond StÃ¶cker).
> # (https://github.com/boost-R/gamboostLSS/issues/9)
> set.seed(1907)
> x1 <- rnorm(1000)
> mu    <- 2*x1
> sigma <- rep(1, 1000)
> y <- numeric(1000)
> for( i in 1:1000)
+        y[i] <- rnorm(1, mean = mu[i], sd=sigma[i])
> dat <- data.frame(x1=x1, y=y)
> ## model with default families
> model <- mboostLSS(y ~ bbs(x1), data = dat, control = boost_control(mstop = 2))
> ## cvrisk.mboostLSS() does not work as families was not specified in model call
> cvr <- try(cvrisk(model, folds = cv(model.weights(model), B=3), trace=FALSE),
+            silent = TRUE)
Warning message:
In make.grid(mstop(object)) :
  Duplicates produced; Only unique values are returned
> if (inherits(cvr, "try-error"))
+     stop("cvrisk does not work if no family was (explicitly) chosen")
> 
> proc.time()
   user  system elapsed 
  1.989   0.104   2.296 
