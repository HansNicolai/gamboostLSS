
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "gamboostLSS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "gamboostLSS-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('gamboostLSS')
Loading required package: mboost
Loading required package: parallel
Loading required package: stabs
This is mboost 2.5-0. See ‘package?mboost’ and ‘news(package  = "mboost")’
for a complete list of changes.


Attaching package: ‘gamboostLSS’

The following object is masked from ‘package:stats’:

    model.weights

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.families")
> ### * as.families
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: as.families
> ### Title: Include 'gamlss' families in the boosting framework of
> ###   'gamboostLSS'
> ### Aliases: as.families gamlss.Families gamlss1parMu gamlss2parMu
> ###   gamlss2parSigma gamlss3parMu gamlss3parSigma gamlss3parNu
> ###   gamlss4parMu gamlss4parSigma gamlss4parNu gamlss4parTau
> ### Keywords: models distributions
> 
> ### ** Examples
> 
> ## simulate small example
> set.seed(123)
> x <- runif(1000)
> 
> y <- rnorm(mean = 2 + 3 * x,        # effect on mu
+            sd   = exp( 1 - 1 * x ), # effect on sigma
+            n    = 1000)
> 
> ## boosting
> glmss <- glmboostLSS(y ~ x, families = as.families("NO"))
> ## the same:
> if (require("gamlss.dist")) {
+     glmss <- glmboostLSS(y ~ x, families = as.families(NO))
+     glmss <- glmboostLSS(y ~ x, families = as.families(NO()))
+ }
Loading required package: gamlss.dist
Loading required package: MASS

Attaching package: ‘gamlss.dist’

The following object is masked from ‘package:mboost’:

    Family

> 
> coef(glmss, off2int = TRUE)
$mu
(Intercept)           x 
   2.114767    2.824394 

$sigma
(Intercept)           x 
   1.031368   -1.062068 

> 
> ## compare to gamlss
> library(gamlss)
Loading required package: splines
Loading required package: gamlss.data
Loading required package: nlme
 **********   GAMLSS Version 4.3-5  ********** 
For more on GAMLSS look at http://www.gamlss.org/
Type gamlssNews() to see new features/changes/bug fixes.

> glmss2 <- gamlss(y ~ x, sigma.formula = ~x, family = "NO")
GAMLSS-RS iteration 1: Global Deviance = 3844.26 
GAMLSS-RS iteration 2: Global Deviance = 3844.149 
GAMLSS-RS iteration 3: Global Deviance = 3844.149 
> coef(glmss2)
(Intercept)           x 
   2.110191    2.845264 
> glmss2$sigma.coef
(Intercept)           x 
   1.031275   -1.062060 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("as.families", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:gamlss’, ‘package:nlme’, ‘package:gamlss.data’,
  ‘package:splines’, ‘package:gamlss.dist’, ‘package:MASS’

> nameEx("cvrisk")
> ### * cvrisk
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cvrisk.mboostLSS
> ### Title: Cross-Validation
> ### Aliases: cvrisk cvrisk.mboostLSS make.grid plot.cvriskLSS
> ### Keywords: models regression
> 
> ### ** Examples
> 
> ## Data generating process:
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 +1 * x1 +0.5 * x2 -0.5 * x3 -1 * x4)
> sigma <- exp(-0.4 * x3 -0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> ## linear model with y ~ . for both components: 100 boosting iterations
> model <- glmboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 100),
+                      center = TRUE)
> 
> ## set up a grid
> grid <-  make.grid(mstop(model), length.out = 5, dense_mu_grid = FALSE)
> plot(grid)
> 
> 
> 
> ### Other grids:
> plot(make.grid(mstop(model), length.out = 3, dense_mu_grid = FALSE))
> plot(make.grid(c(mu = 400, sigma = 400), log = FALSE, dense_mu_grid = FALSE))
> plot(make.grid(c(mu = 400, sigma = 400), length.out = 4,
+                min = 100, log = FALSE, dense_mu_grid = FALSE))
> 
> 
> ### Now use dense mu grids
> # standard grid
> plot(make.grid(c(mu = 100, sigma = 100), dense = FALSE),
+      pch = 20, col = "red")
> # dense grid for all mstop_mu values greater than mstop_sigma
> grid <- make.grid(c(mu = 100, sigma = 100))
> points(grid, pch = 20, cex = 0.2)
> abline(0,1)
> 
> # now with three parameters
> grid <- make.grid(c(mu = 100, sigma = 100, df = 30),
+                   length.out = c(5, 5, 2), dense = FALSE)
> densegrid <- make.grid(c(mu = 100, sigma = 100, df = 30),
+                        length.out = c(5, 5, 2))
> par(mfrow = c(1,2))
> # first for df = 1
> plot(grid[grid$df == 1, 1:2], main = "df = 1", pch = 20, col = "red")
> abline(0,1)
> abline(v = 1)
> # now expand grid for all mu values greater the corresponding sigma
> # value (i.e. below the bisecting line) and above df (i.e. 1)
> points(densegrid[densegrid$df == 1, 1:2], pch = 20, cex = 0.2)
> 
> # now for df = 30
> plot(grid[grid$df == 30, 1:2], main = "df = 30", pch = 20, col = "red")
> abline(0,1)
> abline(v = 30)
> # now expand grid for all mu values greater the corresponding sigma
> # value (i.e. below the bisecting line) and above df (i.e. 30)
> points(densegrid[densegrid$df == 30, 1:2], pch = 20, cex = 0.2)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cvrisk", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("families")
> ### * families
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Families
> ### Title: Families for GAMLSS models
> ### Aliases: Families families GaussianLSS GaussianMu GaussianSigma
> ###   GammaLSS GammaMu GammaSigma BetaLSS BetaMu BetaPhi NBinomialLSS
> ###   NBinomialMu NBinomialSigma StudentTLSS StudentTMu StudentTSigma
> ###   StudentTDf LogNormalLSS LogNormalMu LogNormalSigma WeibullLSS
> ###   WeibullMu WeibullSigma LogLogLSS LogLogMu LogLogSigma ZIPoLSS ZINBLSS
> ###   options stab_ngrad stabilize_ngrad stabilize_ngradient
> ### Keywords: models distributions
> 
> ### ** Examples
> 
> ## Example to define a new distribution:
> ## Students t-distribution with two parameters, df and mu:
> 
> ## sub-Family for mu
> ## -> generate object of the class family from the package mboost
> newStudentTMu  <- function(mu, df){
+ 
+     # loss is negative log-Likelihood, f is the parameter to be fitted with
+     # id link -> f = mu
+     loss <- function(df,  y, f) {
+         -1 * (lgamma((df + 1)/2)  - lgamma(1/2) -
+               lgamma(df/2) - 0.5 * log(df) -
+               (df + 1)/2 * log(1 + (y - f)^2/(df )))
+     }
+     # risk is sum of loss
+     risk <- function(y, f, w = 1) {
+         sum(w * loss(y = y, f = f, df = df))
+     }
+     # ngradient is the negative derivate w.r.t. mu
+     ngradient <- function(y, f, w = 1) {
+         (df + 1) * (y - f)/(df  + (y - f)^2)
+     }
+ 
+     # use the Family constructor of mboost
+     Family(ngradient = ngradient, risk = risk, loss = loss,
+            response = function(f) f,
+            name = "new Student's t-distribution: mu (id link)")
+ }
> 
> ## sub-Family for df
> newStudentTDf <- function(mu, df){
+ 
+     # loss is negative log-Likelihood, f is the parameter to be fitted with
+     # log-link: exp(f) = df
+     loss <- function( mu, y, f) {
+         -1 * (lgamma((exp(f) + 1)/2)  - lgamma(1/2) -
+               lgamma(exp(f)/2) - 0.5 * f -
+               (exp(f) + 1)/2 * log(1 + (y - mu)^2/(exp(f) )))
+     }
+     # risk is sum of loss
+     risk <- function(y, f, w = 1) {
+         sum(w * loss(y = y, f = f,  mu = mu))
+     }
+     # ngradient is the negative derivate w.r.t. df
+     ngradient <- function(y, f, w = 1) {
+         exp(f)/2 * (digamma((exp(f) + 1)/2) - digamma(exp(f)/2)) -
+             0.5 - (exp(f)/2 * log(1 + (y - mu)^2 / (exp(f) )) -
+                    (y - mu)^2 / (1 + (y - mu)^2 / exp(f)) * (exp(-f) + 1)/2)
+     }
+     # use the Family constructor of mboost
+     Family(ngradient = ngradient, risk = risk, loss = loss,
+            response = function(f) exp(f),
+            name = "Student's t-distribution: df (log link)")
+ }
> 
> ## families object for new distribution
> newStudentT <- Families(mu= newStudentTMu(mu=mu, df=df),
+                         df=newStudentTDf(mu=mu, df=df))
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("families", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("gamboostLSS-package")
> ### * gamboostLSS-package
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: gamboostLSS-package
> ### Title: Boosting algorithms for GAMLSS
> ### Aliases: gamboostLSS-package
> ### Keywords: package
> 
> ### ** Examples
> 
> # Generate covariates
> x1 <- runif(100)
> x2 <- runif(100)
> eta_mu <-     2 - 2*x1
> eta_sigma <-  -1  + 2*x2
> 
> # Generate response: Negative Binomial Distribution
> y <- numeric(100)
> for( i in 1:100)  y[i] <- rnbinom(1, size=exp(eta_sigma[i]), mu=exp(eta_mu[i]))
> 
> # Model fitting, 300 boosting steps, same formula for both distribution parameters
> mod1 <- glmboostLSS( y ~ x1 + x2, families=NBinomialLSS(),
+         control=boost_control(mstop=300), center = TRUE)
> 
> # Shrinked effect estimates
> coef(mod1, off2int=TRUE)
$mu
(Intercept)          x1          x2 
  2.3629274  -1.7170135  -0.7735303 

$sigma
(Intercept)          x1          x2 
 -0.3578293  -0.7798073   1.8236518 

> 
> # Empirical risk with respect to mu
> plot(risk(mod1)$mu)
> 
> # Empirical risk with respect to sigma
> plot(risk(mod1)$sigma)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("gamboostLSS-package", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("india")
> ### * india
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: india
> ### Title: Malnutrition of Children in India (DHS, 1998-99)
> ### Aliases: india india.bnd
> ### Keywords: datasets
> 
> ### ** Examples
> 
> if (require("BayesX")) {
+   ## plot distribution of stunting in India
+   drawmap(india, map = india.bnd, regionvar = "mcdist", plotvar = "stunting")
+ }
Loading required package: BayesX
Loading required package: shapefiles
Loading required package: foreign

Attaching package: ‘shapefiles’

The following objects are masked from ‘package:foreign’:

    read.dbf, write.dbf

Note: Function plotsurf depends on akima which has
 a restricted licence that explicitly forbids commercial use.
 akima is therefore disabled by default and may be enabled by
 akimaPermit(). Calling this function includes your agreement to
 akima`s licence restrictions.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("india", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching ‘package:BayesX’, ‘package:shapefiles’, ‘package:foreign’

> nameEx("mboostLSS")
> ### * mboostLSS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mboostLSS
> ### Title: Fitting GAMLSS by Boosting
> ### Aliases: mboostLSS blackboostLSS glmboostLSS gamboostLSS mboostLSS_fit
> ### Keywords: models nonlinear fitting
> 
> ### ** Examples
> 
> 
> ### Data generating process:
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 +1 * x1 +0.5 * x2 -0.5 * x3 -1 * x4)
> sigma <- exp(-0.4 * x3 -0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> ### linear model with y ~ . for both components: 400 boosting iterations
> model <- glmboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 400),
+                      center = TRUE)
> coef(model, off2int = TRUE)
$mu
(Intercept)          x1          x2          x3          x4 
  1.6393421   0.9521780   0.4673261  -0.4553980  -0.8812656 

$sigma
(Intercept)          x1          x2          x3          x4          x5 
-0.21020051  0.18090759  0.03140974 -0.36216484 -0.27645489  0.13696242 
         x6 
 0.32951815 

> 
> 
> ### estimate model with different formulas for mu and sigma:
> names(NBinomialLSS())      # names of the family
[1] "mu"    "sigma"
> 
> 
> 
> ### Offset needs to be specified via the arguments of families object:
> model <- glmboostLSS(y ~ ., data = dat,
+                      families = NBinomialLSS(mu = mean(mu),
+                                              sigma = mean(sigma)),
+                      control = boost_control(mstop = 10),
+                      center = TRUE)
> # Note: mu-offset = log(mean(mu)) and sigma-offset = log(mean(sigma))
> #       as we use a log-link in both families
> coef(model)
$mu
(Intercept)          x1          x4 
-0.00644371  0.32790393 -0.22505852 
attr(,"offset")
[1] 2.843104

$sigma
(Intercept) 
 -0.6069266 
attr(,"offset")
[1] 0.1828927

> log(mean(mu))
[1] 2.843104
> log(mean(sigma))
[1] 0.1828927
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mboostLSS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("methods")
> ### * methods
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: methods
> ### Title: Methods for mboostLSS
> ### Aliases: print.mboostLSS summary.mboostLSS coef.mboostLSS
> ###   coef.glmboostLSS risk risk.mboostLSS [.mboostLSS mstop.mboostLSS
> ###   mstop.oobag mstop.cvriskLSS selected selected.mboostLSS
> ###   fitted.mboostLSS predict.mboostLSS predint PI plot.glmboostLSS
> ###   plot.gamboostLSS plot.predint update.mboostLSS model.weights
> ###   model.weights.default model.weights.mboostLSS
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> ### generate data
> set.seed(1907)
> x1 <- rnorm(1000)
> x2 <- rnorm(1000)
> x3 <- rnorm(1000)
> x4 <- rnorm(1000)
> x5 <- rnorm(1000)
> x6 <- rnorm(1000)
> mu    <- exp(1.5 + x1^2 +0.5 * x2 - 3 * sin(x3) -1 * x4)
> sigma <- exp(-0.2 * x4 +0.2 * x5 +0.4 * x6)
> y <- numeric(1000)
> for( i in 1:1000)
+     y[i] <- rnbinom(1, size = sigma[i], mu = mu[i])
> dat <- data.frame(x1, x2, x3, x4, x5, x6, y)
> 
> ### fit a model
> model <- gamboostLSS(y ~ ., families = NBinomialLSS(), data = dat,
+                      control = boost_control(mstop = 100))
> 
> ### extract coefficients
> coef(model)
$mu
$mu$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 1.12319410  0.71021738  0.30207887 -0.07821217 -0.41073707 -0.68864712 
          7           8           9          10          11          12 
-0.90747174 -1.06720601 -1.17544610 -1.24116445 -1.26789845 -1.24860862 
         13          14          15          16          17          18 
-1.16452205 -0.98825078 -0.69178736 -0.25652276  0.32409040  1.04219278 
         19          20          21          22          23          24 
 1.87642289  2.79735352  3.77145116  4.76262011  5.75135917  6.73946987 

attr(,"offset")
[1] 8.987845

$sigma
$sigma$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 0.86207426  0.74904280  0.63511284  0.51632364  0.39102409  0.26276199 
          7           8           9          10          11          12 
 0.14010107  0.03466294 -0.04353616 -0.08711018 -0.09194470 -0.05666241 
         13          14          15          16          17          18 
 0.01551477  0.11002849  0.20900417  0.30099124  0.37917871  0.43977906 
         19          20          21          22          23          24 
 0.48283434  0.51150484  0.53082827  0.54708344  0.56376091  0.58054869 

$sigma$`bbs(x2, df = dfbase)`
            1             2             3             4             5 
-0.3084370474 -0.2828511355 -0.2572366006 -0.2314539526 -0.2054021419 
            6             7             8             9            10 
-0.1791726407 -0.1534018582 -0.1287416747 -0.1053850599 -0.0821077874 
           11            12            13            14            15 
-0.0572887497 -0.0298604914  0.0003318225  0.0324249913  0.0646804998 
           16            17            18            19            20 
 0.0950414725  0.1227414949  0.1495224856  0.1770388298  0.2056443435 
           21            22            23            24 
 0.2348918341  0.2644328690  0.2940230366  0.3236218712 

$sigma$`bbs(x3, df = dfbase)`
          1           2           3           4           5           6 
 0.59910264  0.67045021  0.74177472  0.81250769  0.87887882  0.93220572 
          7           8           9          10          11          12 
 0.95786424  0.93903296  0.86423015  0.72936357  0.54142464  0.31659947 
         13          14          15          16          17          18 
 0.07928798 -0.14504818 -0.33831119 -0.48959099 -0.59533998 -0.65500733 
         19          20          21          22          23          24 
-0.67444211 -0.66621554 -0.64159410 -0.60933662 -0.57443580 -0.53923522 

$sigma$`bbs(x4, df = dfbase)`
           1            2            3            4            5            6 
 1.056216433  0.969750236  0.883337381  0.797254339  0.712113371  0.629070053 
           7            8            9           10           11           12 
 0.549376511  0.473113696  0.399795141  0.326531464  0.249608188  0.167647564 
          13           14           15           16           17           18 
 0.081403317 -0.008272204 -0.098290330 -0.188187106 -0.280297226 -0.374966391 
          19           20           21           22           23           24 
-0.472376767 -0.572284583 -0.674275413 -0.777223352 -0.880174191 -0.983046600 

attr(,"offset")
[1] -2.427222

> 
> ### only for distribution parameter mu
> coef(model, parameter = "mu")
$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 1.12319410  0.71021738  0.30207887 -0.07821217 -0.41073707 -0.68864712 
          7           8           9          10          11          12 
-0.90747174 -1.06720601 -1.17544610 -1.24116445 -1.26789845 -1.24860862 
         13          14          15          16          17          18 
-1.16452205 -0.98825078 -0.69178736 -0.25652276  0.32409040  1.04219278 
         19          20          21          22          23          24 
 1.87642289  2.79735352  3.77145116  4.76262011  5.75135917  6.73946987 

attr(,"offset")
[1] 8.987845
> 
> ### only for covariate x1
> coef(model, which = "x1")
$mu
$mu$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 1.12319410  0.71021738  0.30207887 -0.07821217 -0.41073707 -0.68864712 
          7           8           9          10          11          12 
-0.90747174 -1.06720601 -1.17544610 -1.24116445 -1.26789845 -1.24860862 
         13          14          15          16          17          18 
-1.16452205 -0.98825078 -0.69178736 -0.25652276  0.32409040  1.04219278 
         19          20          21          22          23          24 
 1.87642289  2.79735352  3.77145116  4.76262011  5.75135917  6.73946987 

attr(,"offset")
[1] 8.987845

$sigma
$sigma$`bbs(x1, df = dfbase)`
          1           2           3           4           5           6 
 0.86207426  0.74904280  0.63511284  0.51632364  0.39102409  0.26276199 
          7           8           9          10          11          12 
 0.14010107  0.03466294 -0.04353616 -0.08711018 -0.09194470 -0.05666241 
         13          14          15          16          17          18 
 0.01551477  0.11002849  0.20900417  0.30099124  0.37917871  0.43977906 
         19          20          21          22          23          24 
 0.48283434  0.51150484  0.53082827  0.54708344  0.56376091  0.58054869 

attr(,"offset")
[1] -2.427222

> 
> 
> ### plot complete model
> par(mfrow = c(4, 3))
> plot(model)
> ### plot first parameter only
> par(mfrow = c(2, 3))
> plot(model, parameter = "mu")
> ### now plot only effect of x3 of both parameters
> par(mfrow = c(1, 2))
> plot(model, which = "x3")
> ### first component second parameter (sigma)
> par(mfrow = c(1, 1))
> plot(model, which = 1, parameter = 2)
> 
> 
> par(mfrow = c(2, 2))
> plot(risk(model, parameter = "mu")[[1]])
> plot(risk(model, parameter = "sigma")[[1]])
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("methods", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("weighted_median")
> ### * weighted_median
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weighted.median
> ### Title: Weighted Median
> ### Aliases: weighted.median
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> ## compute the weighted median with case weights
> x <- c(1, 2, 3, 4)
> w <- c(0, 1, 2, 3)
> weighted.median(x, w)
[1] 3.5
> 
> ## compute the weighted median with arbitrary weights
> x <- rnorm(100)
> w <- runif(100)
> weighted.median(x, w)
[1] 0.1532533
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weighted_median", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.208 0.297 6.895 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
